import java.util.Scanner;

public class dijkstra {
    int d[] = new int[10]; 
    int p[] = new int[10]; 
    int visited[] = new int[10];
    static final int INF = 99; // Using 99 to represent infinity

    public void dijk(int[][] a, int s, int n) {
        int u = -1, v, i, j, min; 

        for (v = 0; v < n; v++) {
            d[v] = INF;
            p[v] = -1;
            visited[v] = 0;
        } 
        d[s] = 0;

        for (i = 0; i < n; i++) {
            min = INF; 
            for (j = 0; j < n; j++) {
                if (d[j] < min && visited[j] == 0) {
                    min = d[j]; 
                    u = j;
                }
            }
            visited[u] = 1; 

            for (v = 0; v < n; v++) {
                if ((d[u] + a[u][v] < d[v]) && (u != v) && visited[v] == 0 && a[u][v] != INF) {
                    d[v] = d[u] + a[u][v]; 
                    p[v] = u;
                }
            }
        }
    }

    void path(int v, int s) {
        if (p[v] != -1) path(p[v], s); 
        if (v != s)
            System.out.print("->" + v + " ");
    }

    void display(int s, int n) {
        int i; 
        for (i = 0; i < n; i++) {
            if (i != s) {
                System.out.print(s + " ");
                path(i, s);
                System.out.print("=" + d[i] + " "); 
                System.out.println();
            }
        }
    }

    public static void main(String[] args) {
        int a[][] = new int[10][10]; 
        int i, j, n, s;

        System.out.println("Enter the number of cities:"); 
        Scanner sc = new Scanner(System.in); 
        n = sc.nextInt();

        System.out.println("Enter the toll amount to be paid through all roads (enter 99 for no direct connection):"); 
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++) 
                a[i][j] = sc.nextInt();

        System.out.println("Enter the source city:"); 
        s = sc.nextInt();

        dijkstra tr = new dijkstra(); 
        tr.dijk(a, s, n);

        System.out.println("The shortest path from source city " + s + " to remaining cities are:");
        tr.display(s, n);

        sc.close();
    }
}
